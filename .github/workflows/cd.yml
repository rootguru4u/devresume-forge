name: CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - 'release/*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      version:
        description: 'Version/Tag to deploy'
        required: false
        default: 'latest'

env:
  DOCKER_REGISTRY: ghcr.io
  KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}

jobs:
  # Determine deployment environment and strategy
  setup:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.determine-env.outputs.environment }}
      version: ${{ steps.determine-env.outputs.version }}
      deploy: ${{ steps.determine-env.outputs.deploy }}
    
    steps:
    - name: Determine Environment
      id: determine-env
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          echo "deploy=true" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "environment=production" >> $GITHUB_OUTPUT
          echo "version=latest" >> $GITHUB_OUTPUT
          echo "deploy=true" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          echo "environment=staging" >> $GITHUB_OUTPUT
          echo "version=develop" >> $GITHUB_OUTPUT
          echo "deploy=true" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
          echo "environment=staging" >> $GITHUB_OUTPUT
          echo "version=${GITHUB_REF#refs/heads/release/}" >> $GITHUB_OUTPUT
          echo "deploy=true" >> $GITHUB_OUTPUT
        else
          echo "deploy=false" >> $GITHUB_OUTPUT
        fi

  # Deploy to Staging Environment
  deploy-staging:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.deploy == 'true' && needs.setup.outputs.environment == 'staging'
    environment: 
      name: staging
      url: https://staging.devresume-forge.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > /tmp/kubeconfig
        echo "KUBECONFIG=/tmp/kubeconfig" >> $GITHUB_ENV

    - name: Deploy to Kubernetes (Staging)
      run: |
        # Update image tags in Kubernetes manifests
        sed -i "s|ghcr.io/.*frontend:.*|ghcr.io/${{ github.repository }}/frontend:${{ needs.setup.outputs.version }}|g" k8s/staging/frontend-deployment.yaml
        sed -i "s|ghcr.io/.*backend:.*|ghcr.io/${{ github.repository }}/backend:${{ needs.setup.outputs.version }}|g" k8s/staging/backend-deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/staging/
        
        # Wait for rollout to complete
        kubectl rollout status deployment/frontend-staging -n staging --timeout=300s
        kubectl rollout status deployment/backend-staging -n staging --timeout=300s

    - name: Run Smoke Tests
      run: |
        # Wait for services to be ready
        sleep 30
        
        # Get staging URL and run basic health checks
        STAGING_URL="https://staging.devresume-forge.com"
        
        echo "Running smoke tests against $STAGING_URL"
        curl -f "$STAGING_URL/api/health" || exit 1
        curl -f "$STAGING_URL" || exit 1
        
        echo "✅ Smoke tests passed"

    - name: Update Deployment Status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Staging deployment successful"
        else
          echo "❌ Staging deployment failed"
        fi

  # Deploy to Production Environment
  deploy-production:
    runs-on: ubuntu-latest
    needs: [setup, deploy-staging]
    if: needs.setup.outputs.deploy == 'true' && needs.setup.outputs.environment == 'production'
    environment: 
      name: production
      url: https://devresume-forge.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > /tmp/kubeconfig
        echo "KUBECONFIG=/tmp/kubeconfig" >> $GITHUB_ENV

    - name: Blue-Green Deployment Setup
      run: |
        # Create blue-green deployment strategy
        CURRENT_COLOR=$(kubectl get service frontend-prod -o jsonpath='{.spec.selector.color}' || echo "blue")
        if [ "$CURRENT_COLOR" == "blue" ]; then
          NEW_COLOR="green"
        else
          NEW_COLOR="blue"
        fi
        echo "NEW_COLOR=$NEW_COLOR" >> $GITHUB_ENV
        echo "CURRENT_COLOR=$CURRENT_COLOR" >> $GITHUB_ENV

    - name: Deploy New Version (Blue-Green)
      run: |
        # Update image tags for new color deployment
        sed -i "s|ghcr.io/.*frontend:.*|ghcr.io/${{ github.repository }}/frontend:${{ needs.setup.outputs.version }}|g" k8s/production/frontend-deployment-$NEW_COLOR.yaml
        sed -i "s|ghcr.io/.*backend:.*|ghcr.io/${{ github.repository }}/backend:${{ needs.setup.outputs.version }}|g" k8s/production/backend-deployment-$NEW_COLOR.yaml
        
        # Deploy new version
        kubectl apply -f k8s/production/frontend-deployment-$NEW_COLOR.yaml
        kubectl apply -f k8s/production/backend-deployment-$NEW_COLOR.yaml
        
        # Wait for new deployment to be ready
        kubectl rollout status deployment/frontend-prod-$NEW_COLOR -n production --timeout=600s
        kubectl rollout status deployment/backend-prod-$NEW_COLOR -n production --timeout=600s

    - name: Run Production Health Checks
      run: |
        # Get the new deployment's internal service URL for testing
        kubectl port-forward service/frontend-prod-$NEW_COLOR 8080:80 -n production &
        PORT_FORWARD_PID=$!
        sleep 10
        
        # Run comprehensive health checks
        echo "Running production health checks..."
        curl -f "http://localhost:8080/api/health" || exit 1
        curl -f "http://localhost:8080" || exit 1
        
        # Kill port-forward
        kill $PORT_FORWARD_PID
        
        echo "✅ Production health checks passed"

    - name: Switch Traffic (Blue-Green)
      run: |
        # Update service selectors to point to new color
        kubectl patch service frontend-prod -p '{"spec":{"selector":{"color":"'$NEW_COLOR'"}}}' -n production
        kubectl patch service backend-prod -p '{"spec":{"selector":{"color":"'$NEW_COLOR'"}}}' -n production
        
        echo "✅ Traffic switched to $NEW_COLOR deployment"

    - name: Verify Production Deployment
      run: |
        # Final verification with actual production URL
        sleep 30
        PROD_URL="https://devresume-forge.com"
        
        echo "Verifying production deployment at $PROD_URL"
        curl -f "$PROD_URL/api/health" || exit 1
        curl -f "$PROD_URL" || exit 1
        
        echo "✅ Production deployment verified"

    - name: Cleanup Old Deployment
      run: |
        # Wait a bit before cleaning up old deployment
        sleep 60
        
        # Remove old color deployment
        kubectl delete deployment frontend-prod-$CURRENT_COLOR -n production --ignore-not-found=true
        kubectl delete deployment backend-prod-$CURRENT_COLOR -n production --ignore-not-found=true
        
        echo "✅ Old $CURRENT_COLOR deployment cleaned up"

  # Database Migration Job
  database-migration:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.deploy == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > /tmp/kubeconfig
        echo "KUBECONFIG=/tmp/kubeconfig" >> $GITHUB_ENV

    - name: Run Database Migrations
      run: |
        kubectl apply -f k8s/jobs/migration-job.yaml
        kubectl wait --for=condition=complete job/db-migration --timeout=300s

  # Rollback Job (Manual trigger)
  rollback:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment != ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > /tmp/kubeconfig
        echo "KUBECONFIG=/tmp/kubeconfig" >> $GITHUB_ENV

    - name: Rollback Deployment
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment }}"
        kubectl rollout undo deployment/frontend-$ENVIRONMENT -n $ENVIRONMENT
        kubectl rollout undo deployment/backend-$ENVIRONMENT -n $ENVIRONMENT
        
        echo "✅ Rollback completed for $ENVIRONMENT"

  # Notification
  notify-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
    - name: Slack Notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          🚀 Deployment Status: ${{ job.status }}
          Environment: ${{ needs.setup.outputs.environment }}
          Version: ${{ needs.setup.outputs.version }}
          Commit: ${{ github.sha }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }} 