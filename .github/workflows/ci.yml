name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: devresume-forge

jobs:
  # Job 1: Lint and Test Frontend
  frontend-ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run Frontend Tests
      run: npm test -- --coverage --watchAll=false

    - name: Build Frontend
      run: npm run build

    - name: Upload Frontend Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/
        retention-days: 1

  # Job 2: Lint and Test Backend
  backend-ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    services:
      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run Backend Tests
      run: npm test
      env:
        MONGODB_URI_TEST: mongodb://testuser:testpass@localhost:27017/resume_app_test?authSource=admin
        JWT_SECRET: test-jwt-secret
        JWT_REFRESH_SECRET: test-refresh-secret

    - name: Upload Backend Test Coverage
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage
        path: backend/coverage/
        retention-days: 1

  # Job 3: Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [frontend-ci, backend-ci]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Frontend Security Audit
      run: cd frontend && npm audit --audit-level=high

    - name: Backend Security Audit
      run: cd backend && npm audit --audit-level=high

  # Job 4: Build Docker Images
  docker-build:
    runs-on: ubuntu-latest
    needs: [frontend-ci, backend-ci, security-scan]
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [frontend, backend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        file: ./${{ matrix.service }}/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 5: Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Docker Compose Tests
      run: |
        docker-compose -f docker-compose.test.yml up --build --abort-on-container-exit
        docker-compose -f docker-compose.test.yml down

  # Job 6: Code Quality & Coverage
  code-quality:
    runs-on: ubuntu-latest
    needs: [frontend-ci, backend-ci]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Frontend Coverage
      uses: actions/download-artifact@v4
      with:
        name: backend-coverage
        path: ./coverage

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Upload to Codecov
      uses: codecov/codecov-action@v4
      with:
        directory: ./coverage
        flags: backend
        name: codecov-backend
        token: ${{ secrets.CODECOV_TOKEN }}

  # Job 7: Notify on Slack (Optional)
  notify:
    runs-on: ubuntu-latest
    needs: [integration-tests, code-quality]
    if: always()

    steps:
    - name: Slack Notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }} 